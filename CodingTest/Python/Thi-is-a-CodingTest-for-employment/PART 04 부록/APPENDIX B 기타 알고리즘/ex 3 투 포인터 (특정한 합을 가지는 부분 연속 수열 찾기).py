# ex 3 투 포인터 (특정한 합을 가지는 부분 연속 수열 찾기).py
'''
투 포인터 알고리즘 : 리스트에 순차적으로 접근해야할 때 2개의 점의 위치를 기록하면서 처리하는 알고리즘

 ex) 한 반에 학생이 40명. 2,3,4,5,6,7번 학생을 지목 -> 2번부터 7번까지의 학생
리스트에 담긴 데이터에 순차적으로 접근해야할 때 '시작점'과 '끝점' 2개의 점으로 접근할 데이터의 범위를 표현할 수 있음

투 포인터 알고리즘
 1. 시작점(start)과 끝점(end)이 첫 번째 원소의 인덱스(0)를 가리키도록 함
 2. 현재 부분합이 M과 같다면 카운트
 3. 현재 부분합이 M보다 작으면 end를 1 증가
 4. 현재 부분합이 M보다 크거나 같으면 start를 1 증가
 5. 모든 경우를 확인할 때까지 2번부터 4번까지의 과정 반복

투 포인터 알고리즘은 구현 가능한 방식이 매우 많음
'''

# '특정한 합을 가지는 부분 연속 수열 찾기' 문제
# 시작점을 오른쪽으로 이동 -> 항상 합이 감소, 끝점을 오른쪽으로 이동 -> 항상 합이 증가
# 리스트 내 원소에 음수 데이터가 포함되어 있는 경우, 투 포인터 알고리즘으로 문제 해결 x
n = 5       # 데이터의 개수 N
m = 5       # 찾고자 하는 부분합 M
data = [1, 2, 3, 2, 5]  # 전체 수열

count = 0
interval_sum = 0
end = 0

# start를 차례대로 증가시키며 반복
for start in range(n):
    # end를 가능한 만큼 이동시키기
    while interval_sum < m and end < n:
        interval_sum += data[end]
        end += 1
    # 부분합이 m일 때 카운트 증가
    if interval_sum == m:
        count += 1
    interval_sum -= data[start]

print(count)
